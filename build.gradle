plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
}

group = 'com.mallang'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
	toolVersion = "0.8.13"
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect { dir ->
					fileTree(dir: dir, excludes: [
                            '**/exception/**', // 예외 처리용 클래스 (로직이 거의 없음)
                            '**/dto/**', // 데이터 전달 객체 (getter/setter만 있음)
                            '**/thirdparty/**', // 외부 라이브러리 연동 코드 (테스트가 불필요하거나 어렵고, 직접 작성한 코드가 아님)
                            '**/entity/**',
                            '**/Q*.class',
                            '**/config/**',
                            '**/common/**',
                            '**/constants/**',
                            '**/infrastructure/**',
                            '**/resilience4j/**'
					])
				})
		)
	}

	violationRules {
		rule {
			enabled = true
			element = 'CLASS'
			limit {
//				counter = 'LINE' // 라인 커버리지 기준
				value = 'COVEREDRATIO'
//				minimum = 0.70 // 70% 이상이어야 통과
			}
		}
	}
}


jacocoTestReport {
    reports {
        // xml.required.set(true)
        // csv.required.set(true) 필요하신 분들은 주석 해제하고 소나 큐브 etc... 와 연동하셔도 됩니다
        html.required.set(true)

        // xml.destination file(project.layout.buildDirectory.dir("jacoco/index.xml")) as File
        // csv.destination file(project.layout.buildDirectory.dir("jacoco/index.csv")) as File
        html.destination file(project.layout.buildDirectory.dir("jacoco/index.html")) as File
    }

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
                            '**/exception/**', // 예외 처리용 클래스 (로직이 거의 없음)
                            '**/dto/**', // 데이터 전달 객체 (getter/setter만 있음)
                            '**/thirdparty/**', // 외부 라이브러리 연동 코드 (테스트가 불필요하거나 어렵고, 직접 작성한 코드가 아님)
							'**/entity/**',
							'**/Q*.class',
                            '**/config/**',
                            '**/common/**',
                            '**/constants/**',
							'**/infrastructure/**',
                            '**/resilience4j/**'
							// ... 제외할 패키지가 있다면 적용해 주세요
					])
				})
		)
	}
	finalizedBy(jacocoTestCoverageVerification)
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	all {
		exclude group: 'commons-logging', module: 'commons-logging'
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('kafkaVersion', '3.8.0')
	set('springKafkaVersion', '3.3.5')
}

dependencies {
	// Spring Boot Web/Cloud/Security
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// JPA & DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache' // 캐시 이용
	// implementation 'org.springframework.session:spring-session-data-redis' // 세션 클러스터링
	// implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

	// 로컬 용도 redis
	implementation 'com.github.codemonstur:embedded-redis:1.4.3'

	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// JWT 라이브러리 (JJWT)
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// Kafka
	// implementation 'org.springframework.kafka:spring-kafka' // 기본 의존성
	// implementation 'org.apache.kafka:kafka-clients:3.8.0'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// 개발 편의성
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// 테스트
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'

	// clova speech api
	implementation 'org.apache.httpcomponents:httpclient:4.5.12'
	implementation 'org.apache.httpcomponents:httpmime:4.3.1'
	implementation 'com.google.code.gson:gson:2.8.5'

	// youtube api
	implementation 'com.google.api-client:google-api-client:1.33.0'
	implementation 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
	implementation 'com.google.apis:google-api-services-youtube:v3-rev20230816-2.0.0'
	implementation 'com.google.http-client:google-http-client-jackson2:1.39.2'

	// resilience4j api
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation "io.github.resilience4j:resilience4j-spring-boot3:2.3.0"
	implementation "io.github.resilience4j:resilience4j-retry"
	implementation "io.github.resilience4j:resilience4j-circuitbreaker"
	implementation "io.github.resilience4j:resilience4j-bulkhead"
	implementation "io.github.resilience4j:resilience4j-timelimiter"

	// 프로메테우스 연동 (메트릭 수집)
	implementation "io.micrometer:micrometer-registry-prometheus"
	implementation "org.springframework.boot:spring-boot-starter-actuator"

	// retry
	implementation 'org.springframework.retry:spring-retry:1.3.3'
	implementation 'org.springframework:spring-aspects'

	// aws s3
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'
	implementation 'com.danielfrak.code:springdoc-openapi-externalized-documentation:1.0.0'

	// mail
	implementation 'org.springframework.boot:spring-boot-starter-mail:3.4.5'
	testImplementation 'com.icegreen:greenmail-junit5:2.0.1'

	// Quartz 스케줄링
	implementation 'org.springframework.boot:spring-boot-starter-quartz:3.4.5'

	// LogStash
	// implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	// Sentry
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:7.9.0'
	implementation 'io.sentry:sentry-logback:7.9.0'

}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.withType(Test) {
	useJUnitPlatform()
}

test {
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	finalizedBy 'jacocoTestCoverageVerification'
}